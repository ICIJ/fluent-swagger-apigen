openapi: 3.0.1
tags:
  - name: /api/pet
    description: Operations about pets
paths:
  /api/pet/:petId:
    get:
      summary: Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API
        error conditions
      description: Find pet by ID
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            maximum: 5
            minimum: 1
            type: integer
            format: int64
      responses:
        "400":
          $ref: '#/components/responses/Invalid ID supplied'
        "404":
          $ref: '#/components/responses/Pet not found'
    post:
      description: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "405":
          $ref: '#/components/responses/Invalid input'
        "404":
          $ref: '#/components/responses/Pet not found'
    delete:
      description: Deletes a pet
      operationId: deletePet
      parameters:
        - in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          $ref: '#/components/responses/Invalid ID supplied'
        "404":
          $ref: '#/components/responses/Pet not found'
  /api/pet:
    put:
      description: Update an existing pet
      operationId: updatePet
      responses:
        "400":
          $ref: '#/components/responses/Invalid ID supplied'
        "404":
          $ref: '#/components/responses/Pet not found'
        "405":
          $ref: '#/components/responses/Validation exception'
    post:
      description: Add a new pet to the store
      operationId: addPet
      responses:
        "405":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pet'
          $ref: '#/components/responses/Invalid input'
  /api/pet/findByStatus:
    get:
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - in: query
          description: Status values that need to be considered for filter
          required: true
          schema:
            type: string
      responses:
        "400":
          $ref: '#/components/responses/Invalid status value'
  /api/pet/findByTags?tags=:tags:
    get:
      summary: Finds Pets by tags
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: findPetsByTags
      parameters:
        - in: query
          description: Tags to filter by
          required: true
          schema:
            type: string
      responses:
        "400":
          $ref: '#/components/responses/Invalid tag value'
  /api/store/order:
    post:
      description: Place an order for a pet
      operationId: placeOrder
      responses:
        "400":
          $ref: '#/components/responses/Invalid Order'
  /api/store/order/:orderId:
    get:
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          $ref: '#/components/responses/Invalid ID supplied'
        "404":
          $ref: '#/components/responses/Order not found'
    delete:
      summary: For valid response try integer IDs with positive integer value. Negative
        or non-integer values will generate API errors
      description: Delete purchase order by ID
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          $ref: '#/components/responses/Invalid ID supplied'
        "404":
          $ref: '#/components/responses/Order not found'
  /api/store/inventory:
    get:
      summary: Returns a map of status codes to quantities
      description: Returns pet inventories by status
      operationId: getInventory
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /api/store:
    get:
      description: Returns petstore home page
      operationId: root
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          example: available
          enum:
            - "available,pending,sold"
      xml:
        name: Pet
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Payload:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: boolean
    Context:
      type: object
      properties:
        currentUser:
          $ref: '#/components/schemas/User'
    User:
      type: object
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        Order Status:
          type: string
          xml:
            name: status
          enum:
            - "placed, approved, delivered"
        complete:
          type: boolean
      xml:
        name: Order
